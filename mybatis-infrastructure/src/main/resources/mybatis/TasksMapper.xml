<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="spring.test.mybatis.infrastructure.mapper.TasksMapper">
    <resultMap id="BaseResultMap" type="spring.test.mybatis.infrastructure.model.Tasks">
        <id column="task_id" jdbcType="INTEGER" property="taskId"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="count" jdbcType="INTEGER" property="count"/>
        <result column="status" jdbcType="TINYINT" property="status"/>
        <result column="priority" jdbcType="TINYINT" property="priority"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="spring.test.mybatis.infrastructure.model.Tasks">
        <result column="description" jdbcType="LONGVARCHAR" property="description"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        task_id, title, count, status, priority
    </sql>
    <sql id="Blob_Column_List">
        description
    </sql>
    <select id="selectByExampleWithBLOBs" parameterType="spring.test.mybatis.infrastructure.model.TasksExample"
            resultMap="ResultMapWithBLOBs">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from tasks
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExample" parameterType="spring.test.mybatis.infrastructure.model.TasksExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from tasks
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from tasks
        where task_id = #{taskId,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from tasks
        where task_id = #{taskId,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="spring.test.mybatis.infrastructure.model.TasksExample">
        delete from tasks
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="spring.test.mybatis.infrastructure.model.Tasks">
        insert into tasks (task_id, title, count, status, priority, description)
        values (#{taskId,jdbcType=INTEGER},
                #{title,jdbcType=VARCHAR},
                #{count,jdbcType=INTEGER},
                #{status,jdbcType=TINYINT},
                #{priority,jdbcType=TINYINT},
                #{description,jdbcType=LONGVARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="spring.test.mybatis.infrastructure.model.Tasks">
        insert into tasks
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="taskId != null">
                task_id,
            </if>
            <if test="title != null">
                title,
            </if>
            <if test="count != null">
                count,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="priority != null">
                priority,
            </if>
            <if test="description != null">
                description,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="taskId != null">
                #{taskId,jdbcType=INTEGER},
            </if>
            <if test="title != null">
                #{title,jdbcType=VARCHAR},
            </if>
            <if test="count != null">
                #{count,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                #{status,jdbcType=TINYINT},
            </if>
            <if test="priority != null">
                #{priority,jdbcType=TINYINT},
            </if>
            <if test="description != null">
                #{description,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="spring.test.mybatis.infrastructure.model.TasksExample"
            resultType="java.lang.Long">
        select count(*) from tasks
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update tasks
        <set>
            <if test="record.taskId != null">
                task_id = #{record.taskId,jdbcType=INTEGER},
            </if>
            <if test="record.title != null">
                title = #{record.title,jdbcType=VARCHAR},
            </if>
            <if test="record.count != null">
                count = #{record.count,jdbcType=INTEGER},
            </if>
            <if test="record.status != null">
                status = #{record.status,jdbcType=TINYINT},
            </if>
            <if test="record.priority != null">
                priority = #{record.priority,jdbcType=TINYINT},
            </if>
            <if test="record.description != null">
                description = #{record.description,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExampleWithBLOBs" parameterType="map">
        update tasks
        set task_id = #{record.taskId,jdbcType=INTEGER},
        title = #{record.title,jdbcType=VARCHAR},
        count = #{record.count,jdbcType=INTEGER},
        status = #{record.status,jdbcType=TINYINT},
        priority = #{record.priority,jdbcType=TINYINT},
        description = #{record.description,jdbcType=LONGVARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update tasks
        set task_id = #{record.taskId,jdbcType=INTEGER},
        title = #{record.title,jdbcType=VARCHAR},
        count = #{record.count,jdbcType=INTEGER},
        status = #{record.status,jdbcType=TINYINT},
        priority = #{record.priority,jdbcType=TINYINT}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="spring.test.mybatis.infrastructure.model.Tasks">
        update tasks
        <set>
            <if test="title != null">
                title = #{title,jdbcType=VARCHAR},
            </if>
            <if test="count != null">
                count = #{count,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=TINYINT},
            </if>
            <if test="priority != null">
                priority = #{priority,jdbcType=TINYINT},
            </if>
            <if test="description != null">
                description = #{description,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where task_id = #{taskId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="spring.test.mybatis.infrastructure.model.Tasks">
        update tasks
        set title       = #{title,jdbcType=VARCHAR},
            count       = #{count,jdbcType=INTEGER},
            status      = #{status,jdbcType=TINYINT},
            priority    = #{priority,jdbcType=TINYINT},
            description = #{description,jdbcType=LONGVARCHAR}
        where task_id = #{taskId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="spring.test.mybatis.infrastructure.model.Tasks">
        update tasks
        set title    = #{title,jdbcType=VARCHAR},
            count    = #{count,jdbcType=INTEGER},
            status   = #{status,jdbcType=TINYINT},
            priority = #{priority,jdbcType=TINYINT}
        where task_id = #{taskId,jdbcType=INTEGER}
    </update>
</mapper>